first to make an empty folder in your system. 
Now open this empty folder in vs code. 
now do npm init. 
this will create an empty npm project. 
which contain only package.json file. 

to track all the changes we  add git to this folder. 

we do  git init. 

PS C:\Users\mohan\OneDrive\Desktop\BackEndProject> git init
Initialized empty Git repository in C:/Users/mohan/OneDrive/Desktop/BackEndProject/.git/

now all this is untacable. for that we need to stage all of them. 
git add .

for commit 
git commit -m "add inicial files for backend"
this can also be done throught the vs code GUI. 

write now the branch at which we are working is master branch. 

to rename this branch to main we can type 
to match github standards. 
git branch -M main
renaming the -M used to rename existing current branch to some new name 
we can see the branch name in left corner 
---------------------------------------------
first creating a new repository in github
name is BackendProject 
ssh https://github.com/Umeshchaurasiya123/BackendProject.git
--------------------------------------

Now to push the code set the origin throught the ssh . 

git remote add origin https://github.com/Umeshchaurasiya123/BackendProject.git

Now remote is set. so all the code will push to repository named BackendProject 

Now to push as well as set the upstream we use command. 

git push -u origin main

to check the status we have git status. 

give information about changes, trackable , untackedable file etc. 
---------------------------------------------------------------------------------------------------------------------

Senario: one important work we do it storing the images of user. 
for storing the images we use 3rd party services. like aws , cloudnary , azur, clould, etc. 
first photo upload and stores temparaily in our server as incase of user connection is lost. than using third party service 
uplaod to clould. 

some company directly uplaod to cloudnary. depend on senarios. 

so let create an folder name public annd inside that creat another folder named temp . 

the problem is when we do git status here. it can not able to track the folder. 
git only track the file. 
so for that we have an file name .getKeep 
this is nothibg but empty file
used to keep the track the of the  empty folder which might be need for project structue. 
-------------------------------------------------------------------------------------------------
now in repository we need some new file like .gitignore 
tell the git to ignore which file, folder , apikeys, etc. 
basically ignoring the sensitive files or files. 
or files or folder which  which can download any time. 
like node_modules. 

in market we have some  gitignore generator. 
create useful .gitignore files for your project 
https://mrkandreev.name/snippets/gitignore-generator/#Node

-------------------------------------------------------------------
environment variable files. 

.env
.env.test
.env.production

environment variable like port etc are taken from systme for secqurity not from files. 

but in case if yoe have to still waht to push that to github in that case you can  delete its name from .gitignore file. 
like .env.sample 

----------------------------------------------------------------------------------------------------------
now in package.json we specify that our main file is index.js 
so create this also. 

but but but.

it depend on program to stores the whole dirctory file here aur inside the src folder. 
creating an src is good practice. 


now in src create a 3 file name constants.js, index.js, app.js


-----------------------------------------------------------------------
insdie the package.js
now index.js file is inside the src folder. 

And here in this project we are using import syntax so have to specify the type as module rather than common which is used 
in required 

now in past we saw that when we chanegs anything in  progrma , add , remove  to refrect the application 
have to start and stop the application

to avoid that we can use an utility nodemon

nodemon is nothing but jai sai hi file chanegs in dirctory are detected automatically restart the  application 

so nodemon is a tool that help the develop node.js based application by automatically restarting the node application when file changes 
in directory(folder or repository) are detected

-------------------- dependency vs dev dependency------------------------------------
dev dependency is  dependency which is used during the devlopment. ise prodiction mai nahi leke jate. 

yai sirf devlopment mai kaam aaiga. production mai ise kaam mai nahi lete. 

npm i nodemon this will make it as  main dependency 

for devlopment  dependency we haev 

you can install nodemon as devlopment dependency

npm install --save-dev nodemon 

or npm install -D nodemon

now in package.json file i get 
"devDependencies": {
    "nodemon": "^3.1.7"
  }

now nodemon will reload whatever you write inside the src folder if change detected. 

but that also need to be specify in package.json file. 

now i will create one command in script  name dev  inside package.json

"scripts": {
    "dev": "nodemon src/index.js"
  },

now when i do npm run dev
it will execute the command.  nodemon src/index.js    wrong not -> "node src/index.js"
basically run the index.js which is our main program. 

--------------------------------------------------------------------------

issue bitween .env and import. 

to use the .env we have to use  require('dotenv').config()

but in type we mention  module 

means we have to sue require syntax not import . 

there is solution for that also. 

----------------------------------------------------------------------------------------src folder------------------

now i want some folder inside the src folder 

professinal prodiction grade project setup. 

controllers or controller -> here comes the main functinality 

db -> database connection logic. database can by any mongodb, sql etc. 

middlerwares-> koi code jo inbetween run karana hai. 

senario:
koi request aai use servar fullfil kar ne sai pahle hi mai koi chekkign lagana chahta hu.to use middleware mai karege. 
there is some request comes from the client and before it is fullfil by the servar i want some kind of checking or somethig else. 

like beforeing  fullfiling the user request i want to ckeck whether this user is  eligible to fullfil the request or not.  
so i will takes the cookies.  to know if you are eligible or not. 
all this done inside the middlerwares

moddels -> to stoes the schema. 

routes->

till now in small project we mentioning the routes in index.js file. 
like app.get(/instagram)

theit are lot of routes and its becomes complex as well. 
so it is stores in seperates folder names routes. 

utils-> 
utilities. here we stores the same code which we needs many times in progrma. which we can use many times. 
like writing a email. 

like file upload is an utility which can be done in photo upload, video upload, profile phtoto uplaod etc. 

like token lena dena. which is gona use many times. why not to create a  seperate utill  for that.and use many times . 

---------------------------------------------prettier packaeg ----------------------------------------------

plugin  or package

prettier 

its vs code extension is also avaialble. 
but in project there are many people who are working. 
they have their own way of writing the code. own setting. 
some have default 2 space while other 4. 
some  gaves the ; at the end while other not  if not compulsory. 

now the problem is when your merge this code. 
it will give to many conflicts. 

so team should be on same page. 
ki what is the type of formating is there. wehther we are using 2 space or 4 space 


senaroi. 

suppose you take one branch  an your editor adding  4 space  eveywhere. 
some one else editor add 2 space  eveywhere. 
now same file but thousand of conflict. 

so not only the extention of vs  but also prettier setting is also importnat to add on each project bases. 

prettier is also an dev dependency majorly. 

npm i -D prettier 

now one  prettier packaeg is added . some manual work is also there. 
have to add some file manually. 


prettier configuration file.

.prettierrc  // it is prettier configuration file. 

some configuration

{
    "singleQuote":false,
    "bracketSpacing":true,
    "tabWidth":2,
    "semi":true,
    "trailingcomma":"es5"
    
}

---------------------------------.prettierignore-------------------------------------------

prettier ignore. like git ignore there is also prettier ignore also. 
which is about which file shoud prettier not do anything. 

mostly node_modules, 
/node_modules
/.dist
*.env 
.env.*
.env
/ .vscode 

// there is also  code generator for thsi also. like we use in .gitignore. 
//////////////////////////////  / .vscod is vs code setting file


-------------------------------------------------------Episode7---------------------------------------------------------
how to connect database in mern with debugging 

how you can connect database is not import. 
but  in which many ways we can connect the database is important. 
what are the problem which we gona face. 

how in production level database are connect and what are the featrue it have 

the database which we are gona use is mongodb. 
mongodb online also called mongodb atlas
most of professinal application also use mongodb online(mongodb atlast). rather than installing the mongodb in system.

mongodb atlast is service which provide the online database. 

--------------Altest project cretion. ------------------------

first go to mongodb atlast. 
in the project section. Create one project. 

Now create  a new cluster. 

In MongoDB, a cluster refers to a collection of servers
that work together to manage and store data.
Clusters ensure high availability, scalability, and fault tolerance.

basically server where our database resides. 

for this project the cluster tier which we are gona use is M0 FREE.
cluster tier  basically  refers to size and capacity of cluster. 
And cluster0 is the default name of the clustetr(server) where our database resides . 


In MongoDB Atlas,
Network Access and Database Access
are two separate security configurations.
Here's the distinction:

1. Network Access
This determines which devices (IP addresses) are allowed to connect to the Atlas cluster.

Purpose: Controls network-level access by restricting or allowing specific IPs to connect to the MongoDB Atlas cluster.
Key Configuration:
IP Whitelisting: You add IP addresses or CIDR blocks (e.g., 192.168.1.1/32) to a list. Only these IPs can initiate a connection.
0.0.0.0/0: Allows access from all IPs (not recommended for production due to security risks).
Example Use Case:
If your development environment uses a specific IP address (e.g., 203.0.113.25), 
you would add that IP to the Network Access list so that your machine can connect to the cluster.

2. Database Access
This determines who (user accounts) can log in to the database and what they are authorized to do.

Purpose: Controls user-level permissions within the database.
Key Configuration:
Database Users: You create and manage users with specific usernames and passwords.
Roles and Privileges: Assign roles (e.g., read, readWrite, dbAdmin) to control what actions a user can perform.
Users must authenticate with their credentials to access the database.
Example Use Case:
Create a user, developer_user, with a readWrite role on a database named myDatabase.
This user can connect to the database but can only perform read and write operations, not administrative tasks.

-------------some .evn file congiguration-----------------------

PORT=8000  where application will gona run 
MONGODB_URI=mongodb+srv://umeshc1998:<db_password>@cluster0.tijty.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0



in utils folder inside constants mention the name of database. 


export const DB_NAME="Videotube"

DB_NAME is not in .env becasue it is not an  system specfic variabe. 
it is an appliaction specific variable. 


---------------------------------------Database connection approaches-------------------------------------------
------------------Discussion----------------------------------

Database connection approach. 
1->
Because in project First index file will Gona execute. 
Then why mention database connection inside the index.js file. 
So when the index file loads . 
The function where database connection logic is mentioned will execute through the iif(immediately invoked function)


2-> 
Create a db name folder  and write the connection function inside that folder and in index file import that function. 

------------------------------------installation------------------------------

Now the database connection will happend throught the moongose as it is an ORM  and app will create through the express. 

so install both. 

And .env is also need as all the confidential data will load throught the .env
for .env we have to handle the required syntax. as our project is based on type  module js not common js. 

install as main dependency not a dev dependency

npm i mongoose express dotenv

---------------database concept important ------------------------------
1 alwase wrapper the database conection in try catch or promissed like resolve , reject. 

2 database is alwase in another continent. 
basically it take some time. 
means use aysn and await. 

so use try catch and asyn await when dealing with database. 


1st approach. 

use iif. 

//iif
giving semicolon before the start of iif is good practice. As there are many iif or statememnt exist. 
which does not have any semicolon at the end. 
to to clanup perpose.
iif is good practice.

--------------------------------------approach 1------------------------------- 

;(async ()=>{

  

})();

// process is something which is gave to us by the node.js 

/* this approach causing the pollution of index file. 
import express from "express";
const app=express();

//iif
;(async ()=>{

    try {
           
       await mongoose.connect(`${process.env.MONGODB_URI}/${DB_NAME}`)
       // basically database is connected. but does our application is able to talk to those database. 
       //app.on check whether it is able to talk or not to database. 

        app.on("error",()=>{
            console.log("Errro: ",error)
            throw error
        })

        app.listen(process.env.PORT, ()=>{
            console.log(` App is listening on port ${process.env.PORT}`);
        })

    } catch (error) {
        console.error("Error: ", error)
        throw error

    }


})();

*/

--------------------------------------approch 2------------------------- 

for 2nd approach create an  empty index.js file in db folder. 

there can be many index.js file in our application. 

-------------------.dotenv congiguration----------------

As early as possible in your appliaction , import and configur dotenv

basically first file which is loading. in that file  environment vaiable should load only.

so the fist file is src/index.js file mention in package.json. 

so there on the top only import 

require('dotenv').config({path: './env'})

but problem is in our program we gave required as well as import. which causing the inconsistancy in program. 


--------------------------npm run dev ---------------------
error. 
Error [ERR_MODULE_NOT_FOUND]: Cannot find module 'C:\Users\mohan\OneDrive\Desktop\BackEndProject\src\constants'
imported from C:\Users\mohan\OneDrive\Desktop\BackEndProject\src\index.js

in src/index.js 
import { DB_NAME } from "./constants";

// basically it is constants.js we have to import. 


---------------Another error-------------
Error [ERR_UNSUPPORTED_DIR_IMPORT]: Directory import 'C:\Users\mohan\OneDrive\Desktop\BackEndProject\src\db'
is not supported resolving ES modules imported from C:\Users\mohan\OneDrive\Desktop\BackEndProject\src\index.js

//basically src/index.js can not able to find 
./db/index.js
import connectDB from "./db";

we have to modified it to 
import connectDB from "./db/index.js";

----error---------------
Error [ERR_MODULE_NOT_FOUND]: Cannot find module 'C:\Users\mohan\OneDrive\Desktop\BackEndProject\src\constants'
imported from C:\Users\mohan\OneDrive\Desktop\BackEndProject\src\db\index.js

now in db\index.js there is import statement which is 
import { DB_NAME } from "../constants"; giving error .
// correct.  
import { DB_NAME } from "../constants.js"

-------------error----------------
file:///C:/Users/mohan/OneDrive/Desktop/BackEndProject/src/index.js:2
require('dotenv').config({path :"./env"})
^

ReferenceError: require is not defined in ES module scope, you can use import instead
This file is being treated as an ES module because it has a '.js'
file extension and 'C:\Users\mohan\OneDrive\Desktop\BackEndProject\package.json' contains "type": "module".
To treat it as a CommonJS script, rename it to use the '.cjs' file extension.

require('dotenv').config({path :"./env"})
this is giving error. 



we have to use in src/index.js file 
this syntax 
import dotenv from 'dotenv';
dotenv.config({ path: './env' });

And in package.json. 

  "scripts": {
    "dev": "nodemon -r dotenv/config  --experimental-json-modules src/index.js"

  }

earlier it was 

  "scripts": {
    "dev": "nodemon src/index.js"
  }

dot.env is only need to load that the start of the project. not other places. 

-----------------------------------------Episode8 ---------------------------------
Custom API Responce and errro handling 
here we are gona deal with how classes are defiend for custom errors. 
how and why  classes are defined for custom api Responc. 
little bit touch the middlerwares as well. 

Now connectDB is asynchonus method. 
asynchronus method whenever complete return one promise as well.

In JavaScript, a Promise is an object that represents the eventual completion (or failure) of an asynchronous operation
and its resulting value. Promises provide a cleaner way to handle asynchronous code compared to traditional callbacks,
avoiding callback hell and making the code easier to read and manage.

means it have .than and .catch as well. 
so in connectDB wich is asychronus method. so when it complete in index.js file we can add .then() and .catch()

connectDB()
.then()
.catch()

connectDB()
.then(()=>{

    // Database connected 
    // to start the server 
    app.listen(process.env.PORT||8000, ()=>{
        console.log(` server is running at port :${process.env.PORT}`);
    })
})
.catch((err)=>{

    console.log("MongoDB connection failed !!! ",err)
})

---------------------------getting the data from user or client----------------------------

in express two thing with which we are mostly work with is request and responce. 

the two most import request throught which backend got the data is. 

1->request.params
getting the data from URL. to backend. 
is part of request.params

2-> request.body 
here data can be comes in diffrent ways. 
like from form, json, body, etc. 

so to handle all this diffrnet type of data from client. 
some activity or confiquration  need to be done. in app()
which is mmostly done throught app.use()

req.body contains the key-value pairs of data submitted in requests body. 
by default is it undefiend. and populate when we use body-parsing middlerwares. 
more to read in express documentation. 

body-parser is by default inbuild in node.js. 




-------------------cookies-----------------------------
how to set cookies securly from server to user browser. 
and how to read that. 
also how to get cookies from client or send by the request to backend. 

cookies-parser is npm is need to work with cookie. 

cookie-parser is a middleware for Express.js 
that parses cookies sent by the client (browser) in HTTP requests
and makes them available as a JavaScript object in your application. 
It simplifies working with cookies in your Express application.


const express = require('express');
const cookieParser = require('cookie-parser');

const app = express();

// Use cookie-parser middleware
app.use(cookieParser());

// Example route to read cookies
app.get('/', (req, res) => {
  console.log('Cookies:', req.cookies); // Logs all cookies
  res.send('Check the console for cookies!');
});

// Example route to set a cookie
app.get('/set-cookie', (req, res) => {
  res.cookie('myCookie', 'cookieValue', { httpOnly: true });
  res.send('Cookie has been set!');
});

// Example route to clear a cookie
app.get('/clear-cookie', (req, res) => {
  res.clearCookie('myCookie');
  res.send('Cookie has been cleared!');
});

const PORT = 3000;
app.listen(PORT, () => {
  console.log(`Server running on http://localhost:${PORT}`);
});


------------middlerwares--------------------


What is app.use() in Express?
In Express.js, app.use() is a method used to register middleware functions or routes in your application.
Middleware functions are functions that execute during the request-response cycle
and can modify the request (req) and response (res) objects or execute additional code.

How Does It Work?
Middleware functions receive three arguments:

req (the HTTP request object)
res (the HTTP response object)
next (a function to pass control to the next middleware)
Middleware functions can:

Perform tasks like logging, authentication, etc.
Call next() to move to the next middleware or route handler.

Examples of app.use()
---------------------------------------1. Applying Middleware Globally--------------------
Middleware applied globally affects all routes.

const express = require('express');
const app = express();

// A middleware to log request details
app.use((req, res, next) => {
  console.log(`${req.method} request to ${req.url}`);
  next(); // Pass control to the next middleware or route handler
});

app.get('/', (req, res) => {
  res.send('Hello, World!');
});

app.listen(3000, () => {
  console.log('Server running on http://localhost:3000');
});

output. 

GET request to /

--------------------------------2. Using Middleware for a Specific Route-----------------------------------
You can restrict middleware to run only for specific routes

// Middleware applied only to "/admin" route
app.use('/admin', (req, res, next) => {
  console.log('Admin middleware');
  next();
});

app.get('/admin', (req, res) => {
  res.send('Welcome to the admin panel');
});

app.get('/user', (req, res) => {
  res.send('Welcome to the user page');
});


Output:

Visiting /admin logs "Admin middleware".
Visiting /user does not run the middleware.


------------------------------------3. Using Third-Party Middleware---------------------
Middleware from libraries like body-parser, cookie-parser, etc., can be added with app.use().


const bodyParser = require('body-parser');

// Use body-parser to parse JSON request bodies
app.use(bodyParser.json());

app.post('/data', (req, res) => {
  console.log(req.body); // Logs parsed JSON body
  res.send('Data received');
});

------------------------------------------Points to Remember:--------------------------
Order Matters:

Middleware runs in the order it is registered. Place global middleware before routes.
Must Call next():

Always call next() unless you want to end the request-response cycle (e.g., by sending a response).
Middleware Chain:

If next() is called, Express looks for the next matching middleware or route handler.



-------------------------Summary:------------------------
app.use() is a powerful tool in Express to manage middleware.
It helps in modifying requests and responses, logging, handling errors, authenticating users, and much more.
You can apply it globally, to specific routes, or for third-party libraries,
making it a cornerstone of Express applications.


---------------------app.use()---------------------------------------
app.use is used when we have to do some configuration or setting up the middlewere. 

app.use(cors)

it is setup in backend to specify who can able to access the backend. 


app.use() is mostly used in app.js 

-------------------------------------------app.js-----------------------------------

some common configuration which we do in app.js is 

1 first creat the app and export the app. 
2 we set the cors (cross origin configuration on server)  which allows who can  acess  the our server
3 we set the body parser to get the data from the client when some form is submited. 
4 we set the express.urlencode to  get  the data from the client throgu the URL. 
5 we set the express.static to store the static fiels(favicon, images, vidoe etcc in my public folder)
6 app.use(cookieParser())   to set and read the cookies to client browser. i.e performing kind of cread operation in client browser. 

finally export the app which gona use in src/index.js result in providing the app. 


------------------------------------------utilities or services - ------------------------------------------------------------

we are gona talk the database  many times . 
in user controller, video controller etc. 

important  concnet. 


--------------------------------------- Episode 9 User and Video model with hooks and JWT--------------------------------


creating a model 

video model and user model. 

id is created by mongodb itself. 

avtar and conver images, videoFile, thumbnail,  will upload in 3rd party service mostly clouldnary.  we only gona store the url of that. 


------------------------------------npm i mongoose-aggregate-paginate-v2--------------------------------



this packages help in writting aggraigate pipline in node.js. 
can find out the aggrigation Qwuey in mondo db website also

to aggrigate the watchistory we are mostly gona use this. 

it is inserted as a plugin in the project mostly. 


----------------------------------------- plugin -------------------------------------------

plugin  is somekind of reasuable codde which can be add to model. 
like giving some  extra functinality to exsiting schema. 


--------------------------------------------hooks or middlerwares-----------------------

hooks in model schema are middlerwares which is used to manages db opration. 

it apply to each schema and can not be reused. 


common hooks are pre and post. 

pre hook is  like in case if any db opetaion. like save. before that whatevet mention in pre do thant and then pass it to next middleware or hook.

-------------------------------------------JWT--------------------------

jwt JavaScript web tokenization. 

it is used to do the authorization and authentication of  users. 

and provide the stateleass tranmission of data. 


1 ones user is done the login (password chekcing etc is done throguth bcrypt)  and it is valid then token is generates. 

2 this token is send to client. 

3 client uses this token as a key to access diffrent routes  


---------------------------------------------bcrypt---------------------------------------------------------------

we can not stoes the password as it is in database. 

so bcrypt do the task of crypting , decrypting the password 


-------------------------------hook middleware and bcrypt and funtion for usercontext
here before saving the data to database. whar we are doing it cheking is passowrd modified if not then
 pass the exection to next() basically next middle ware if any. 


if password is not modofied then it start doing the encryping the password and stored the encrypted password  in database. 

UserSchema.pre("save",async function(next){

    if(!this.isModified("password")) { return next();}

    this.password= await bcrypt.hash(this.password,10)
    next()    

})






------------------------------designing custome methods in schema------------------------------------

UserSchema.methods.ispasswordCorrect= async function(password){

    return  await bcrypt.compare(password,this.password)

}


------------------------------------ jwt-------------------------------

json web token 


var token = jwt.sign({ foo: 'bar' }, privateKey, { algorithm: 'RS256' });
 
it accespt the data , as well as private key and algorithem name. 

so private key is mostly  .evn file. 

it also accept expiry date of token as well. 

jwt.sign({
  data: 'foobar'
}, 'secret', { expiresIn: '1h' });
























































